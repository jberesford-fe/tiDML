[{"path":"https://jberesford-fe.github.io/tiDML/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Justin Beresford Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jberesford-fe.github.io/tiDML/articles/package-replication.html","id":"replication-of-doubleml-results-with-tidml","dir":"Articles","previous_headings":"","what":"Replication of DoubleML results with tiDML","title":"Package Replication","text":"use 401k data Chernozhukov et al. (2018) replicate results package different specifications. goal show tiDML::dml_plr() can produce comparable results much less code.","code":""},{"path":"https://jberesford-fe.github.io/tiDML/articles/package-replication.html","id":"get-data-and-import-packages","dir":"Articles","previous_headings":"","what":"Get data and import packages","title":"Package Replication","text":"Note use data (401k) variables across specifications.","code":"library(tiDML) library(dplyr) library(purrr) library(tibble) library(ggplot2) library(DoubleML) library(mlr3) library(mlr3learners)  df401k <- DoubleML::fetch_401k(return_type = \"data.frame\", instrument = FALSE)  y_col  <- \"net_tfa\"   # or \"tw\" depending on the example d_col  <- \"e401\" x_cols <- c(\"age\",\"inc\",\"educ\",\"fsize\",\"marr\",\"twoearn\",\"db\",\"pira\",\"hown\")"},{"path":"https://jberesford-fe.github.io/tiDML/articles/package-replication.html","id":"tidml-function-call","dir":"Articles","previous_headings":"","what":"tiDML function call","title":"Package Replication","text":"Following Chernozhukov, use random forest stages first classification second regression.","code":"run_tidml <- function(seed, df, y, d, x, grid_trees = 1200L, n_folds = 5L) {   set.seed(seed)    fit_tidml <- dml_plr(     data = df,     y = !!rlang::sym(y),     d = !!rlang::sym(d),     x = x,     m_model = \"rf\",     g_model = \"rf\",     grid_size = list(m = 15, g = 15)   )   tibble(     method = \"tiDML\",     seed = seed,     theta = unname(fit_tidml$theta),     se    = unname(fit_tidml$se)   ) |>     mutate(       lwr = theta - qnorm(0.975) * se,       upr = theta + qnorm(0.975) * se     ) }"},{"path":"https://jberesford-fe.github.io/tiDML/articles/package-replication.html","id":"doubleml-function-call","dir":"Articles","previous_headings":"","what":"DoubleML function call","title":"Package Replication","text":"","code":"run_dml <- function(seed, df, y, d, x, grid_trees = 1200L, n_folds = 5L) {   ## DoubleML :: PLR with ranger   ml_l <- lrn(\"regr.ranger\",               num.trees = grid_trees, num.threads = 1,               respect.unordered.factors = \"order\")   ml_m <- lrn(\"regr.ranger\",             num.trees = 1200, num.threads = 1,             respect.unordered.factors = \"order\")    dml_data <- DoubleMLData$new(     data = df, y_col = y, d_cols = d, x_cols = x   )   dml <- DoubleMLPLR$new(     dml_data, ml_l = ml_l, ml_m = ml_m,     n_folds = n_folds, score = \"partialling out\"   )   dml$fit()    ci <- dml$confint(level = 0.95)   return(tibble(     method = \"DoubleML\",     seed = seed,     theta = as.numeric(dml$coef),     se    = as.numeric(dml$se),     lwr   = as.numeric(ci[1]),     upr   = as.numeric(ci[2])   )   ) }"},{"path":"https://jberesford-fe.github.io/tiDML/articles/package-replication.html","id":"run-both-methods-across-many-replications","dir":"Articles","previous_headings":"","what":"Run both methods across many replications","title":"Package Replication","text":"","code":"replications <- 2L  run_both <- function(seed, df, y, d, x, grid_trees = 1200L, n_folds = 5L) {   tidml_row <- run_tidml(seed, df, y, d, x, grid_trees, n_folds)   dml_row   <- run_dml(seed, df, y, d, x, grid_trees, n_folds)   bind_rows(tidml_row, dml_row) }  # Keep this small for CRAN; bump locally seeds <- 401 + 0:replications-1  # 10 reps for vignette speed res <- map_dfr(   seeds,   ~ run_both(.x, df = df401k, y = y_col, d = d_col, x = x_cols) )"},{"path":"https://jberesford-fe.github.io/tiDML/articles/package-replication.html","id":"method-by-method-densities","dir":"Articles","previous_headings":"","what":"Method-by-method densities","title":"Package Replication","text":"","code":"ggplot(res, aes(theta, fill = method)) +   geom_density(alpha = 0.35) +   labs(     title = \"DML-PLR estimates across seeds\",     x = expression(hat(theta)), y = \"Density\", fill = \"Method\"   ) +   theme_minimal(base_size = 12)"},{"path":"https://jberesford-fe.github.io/tiDML/articles/tiDML.html","id":"first-pass-with-tidml","dir":"Articles","previous_headings":"","what":"First pass with tiDML","title":"Introduction to tiDML","text":"simplest case, can use default settings dml_plr() function estimate DML model, specifycing dataset, outcome metric (Y), treatment variable (D), control variables (X). print average treatment effect (ATE) mpg mtcars dataset, controlling variables covariates. use random forests (rf) nuisance models. string rf shortcut using ranger package fit random forest models. options include lasso, ridge, enet, xgboost, nnet. See ’ LINK MAN enging/model types available default. Printing recipe steps DML estimate shows preprocessing steps automatically applied data fitting nuisance models. case, + zero variance filtering, + Median imputation missing values, + Dummy encoding categorical variables, + Centering scaling numeric variables.","code":"library(tiDML)  random_forest_fitted <- dml_plr(   mtcars,   y = \"mpg\",   d = \"am\",   x = c(\"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"gear\", \"carb\"),   m_model = \"rf\",    g_model = \"rf\" )  #> treatment model (first stage) mode set to: regression  print(random_forest_fitted) #> DML-PLR estimate (res_y ~ res_d) #>   theta: 0.867581 #>   se:    0.952977 #>   95% CI: [-1.000221, 2.735382] random_forest_fitted$tuned_m$final_wf$pre$actions$recipe$recipe #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs #> Number of variables by role #> outcome:   1 #> predictor: 9 #>  #> ── Operations #> • Zero variance filter on: recipes::all_predictors() #> • Dummy variables from: recipes::all_nominal_predictors() #> • Centering and scaling for: recipes::all_numeric_predictors()"},{"path":"https://jberesford-fe.github.io/tiDML/articles/tiDML.html","id":"user-defined-recipies","dir":"Articles","previous_headings":"","what":"User defined recipies","title":"Introduction to tiDML","text":"simple","code":"rf_reg <- parsnip::rand_forest(trees = 500) |>   parsnip::set_mode(\"regression\") |>   parsnip::set_engine(\"ranger\", num.threads = 1)  rf_classif <- parsnip::rand_forest(trees = 500) |>   parsnip::set_mode(\"classification\") |>   parsnip::set_engine(\"ranger\", num.threads = 1)  # Call dml_plr() with the explicit specs fit <- dml_plr(   data = mtcars |> dplyr::mutate(am = as.factor(am)),   y = \"mpg\",   d = \"am\",   x = c(\"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"gear\", \"carb\"),   m_model = rf_classif,   g_model = rf_reg ) #> treatment model (first stage) mode set to: classification  print(fit) #> DML-PLR estimate (res_y ~ res_d) #>   theta: 0.696545 #>   se:    1.088038 #>   95% CI: [-1.435970, 2.829060]"},{"path":"https://jberesford-fe.github.io/tiDML/articles/user-defined-recipies.html","id":"tidml-with-user-defined-recipies","dir":"Articles","previous_headings":"","what":"TiDML with User-defined Recipies","title":"User Defined Recipies","text":"","code":"library(tiDML)  fit <- dml_plr(   mtcars,   y = \"mpg\",   d = \"am\",   x = c(\"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"gear\", \"carb\"),   m_model = \"rf\",   g_model = \"rf\" )  #> treatment model (first stage) mode set to: regression  print(fit) #> DML-PLR estimate (res_y ~ res_d) #>   theta: 0.867581 #>   se:    0.952977 #>   95% CI: [-1.000221, 2.735382]"},{"path":"https://jberesford-fe.github.io/tiDML/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Justin Beresford. Author, maintainer.","code":""},{"path":"https://jberesford-fe.github.io/tiDML/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beresford J (2025). tiDML: Double Machine Learning Tidymodels. R package version 0.0.0.9000.","code":"@Manual{,   title = {tiDML: Double Machine Learning with Tidymodels},   author = {Justin Beresford},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"https://jberesford-fe.github.io/tiDML/index.html","id":"tidml","dir":"","previous_headings":"","what":"Double Machine Learning with Tidymodels","title":"Double Machine Learning with Tidymodels","text":"goal tiDML twofold: Simple first pass: provide straightforward way run Double Machine Learning (DML) R. Users need specify data, formula, model type string (e.g. “random forest”, “xgboost” etc). Defaults set sensible values, ’s quick first pass ask: “OLS results change materially DML?” Run DML tidymodels way: flexible framework lets define inspect stages DML process explicitly. Specify first- second-stage models parsnip, handle preprocessing recipes, combine workflows. custom nuisance models fit seamlessly tiDML pipeline. short, tiDML can simplify things, ’s main contribution letting define examine stages DML process explicitly, way tidymodels user expect.","code":""},{"path":"https://jberesford-fe.github.io/tiDML/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Double Machine Learning with Tidymodels","text":"can install development version tiDML GitHub via pak, pacman remotes:","code":"# Using pak pak::pak(\"jberesford-fe/tiDML\")  # using pacman pacman::p_load_gh(\"jberesford-fe/tiDML\")  # using remotes remotes::install_github(\"jberesford-fe/tiDML\")"},{"path":"https://jberesford-fe.github.io/tiDML/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Double Machine Learning with Tidymodels","text":"basic example shows run DML PLR model random forests nuisance models, taking parameters default. See vignette detailed examples.","code":"library(tiDML)  fit <- dml_plr(   data = mtcars,   y = \"mpg\",   d = \"am\",   x = c(\"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"gear\", \"carb\"),   m_model = \"rf\",   g_model = \"rf\" )   print(fit)"},{"path":"https://jberesford-fe.github.io/tiDML/reference/base_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Default recipe blueprint for nuisance models — base_recipe","title":"Default recipe blueprint for nuisance models — base_recipe","text":"Default recipe blueprint nuisance models","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/base_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default recipe blueprint for nuisance models — base_recipe","text":"","code":"base_recipe(data, outcome, predictors)"},{"path":"https://jberesford-fe.github.io/tiDML/reference/base_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default recipe blueprint for nuisance models — base_recipe","text":"data Training data outcome Outcome column (symbol string) predictors Character vector predictor names","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/base_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default recipe blueprint for nuisance models — base_recipe","text":"recipes::recipe","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/crossfit_residuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-fit residuals across outer folds — crossfit_residuals","title":"Cross-fit residuals across outer folds — crossfit_residuals","text":"Cross-fit residuals across outer folds","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/crossfit_residuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-fit residuals across outer folds — crossfit_residuals","text":"","code":"crossfit_residuals(data, outcome, predictors, spec, folds_idx, recipe_factory)"},{"path":"https://jberesford-fe.github.io/tiDML/reference/dml_plr.html","id":null,"dir":"Reference","previous_headings":"","what":"DML-PLR (Partially Linear Regression) with tidymodels — dml_plr","title":"DML-PLR (Partially Linear Regression) with tidymodels — dml_plr","text":"DML-PLR (Partially Linear Regression) tidymodels","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/dml_plr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DML-PLR (Partially Linear Regression) with tidymodels — dml_plr","text":"","code":"dml_plr(   data,   y,   d,   x,   folds_outer = make_folds(data, v = 5),   resamples_tune = rsample::vfold_cv(data, v = 5),   m_model = \"rf\",   g_model = \"rf\",   recipe_shared = NULL,   recipe_m = NULL,   recipe_g = NULL,   impute_predictors = FALSE,   grid_size = list(m = 15, g = 15),   vcov_type = \"HC2\" )"},{"path":"https://jberesford-fe.github.io/tiDML/reference/dml_plr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DML-PLR (Partially Linear Regression) with tidymodels — dml_plr","text":"data Data frame y Outcome column d Treatment column x Character vector predictors folds_outer Outer folds (shared nuisances) cross-fitting resamples_tune Resamples global tuning (e.g., vfold_cv df) m_model, g_model Either parsnip spec one \"rf\",\"xgb\",\"glmnet\",\"linear\" recipe_shared Optional recipe factory used nuisances recipe_m, recipe_g Optional separate recipe factory nuisance grid_size list(m=, g=) grid sizes tuning vcov_type Sandwich variance type (e.g., \"HC2\")","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/dml_plr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DML-PLR (Partially Linear Regression) with tidymodels — dml_plr","text":"list estimate, SE, CI, objects audit","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/load_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Example Data — load_example_data","title":"Load Example Data — load_example_data","text":"function loads example data demonstrating tiDML package.","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/load_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Example Data — load_example_data","text":"","code":"load_example_data()"},{"path":"https://jberesford-fe.github.io/tiDML/reference/load_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Example Data — load_example_data","text":"dataframe simulated data DML.","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/load_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Example Data — load_example_data","text":"","code":"df <- tiDML::load_example_data() head(df) #>           Y           D          X1          X2 #> 1  1.444424  0.90453131 -0.56047565 -0.60189285 #> 2  2.743067  1.14306579 -0.23017749 -0.99369859 #> 3  4.355613  2.45333840  1.55870831  1.02678506 #> 4  3.817535  1.67776067  0.07050839  0.75106130 #> 5  2.917516 -0.03194895  0.12928774 -1.50916654 #> 6 10.265308  3.92665018  1.71506499 -0.09514745"},{"path":"https://jberesford-fe.github.io/tiDML/reference/numeric_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce predictions to numeric vector (regression or class prob) — numeric_pred","title":"Coerce predictions to numeric vector (regression or class prob) — numeric_pred","text":"Coerce predictions numeric vector (regression class prob)","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/numeric_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce predictions to numeric vector (regression or class prob) — numeric_pred","text":"","code":"numeric_pred(fitted_wf, new_data, positive_class = NULL)"},{"path":"https://jberesford-fe.github.io/tiDML/reference/resolve_engine.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve engine and sensible args for a model kind — resolve_engine","title":"Resolve engine and sensible args for a model kind — resolve_engine","text":"Resolve engine sensible args model kind","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/resolve_engine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve engine and sensible args for a model kind — resolve_engine","text":"","code":"resolve_engine(kind, mode)"},{"path":"https://jberesford-fe.github.io/tiDML/reference/resolve_recipe_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve a recipe input into a factory function — resolve_recipe_factory","title":"Resolve a recipe input into a factory function — resolve_recipe_factory","text":"Resolve recipe input factory function","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/resolve_recipe_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve a recipe input into a factory function — resolve_recipe_factory","text":"","code":"resolve_recipe_factory(recipe_in = NULL)"},{"path":"https://jberesford-fe.github.io/tiDML/reference/resolve_recipe_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve a recipe input into a factory function — resolve_recipe_factory","text":"recipe_in NULL, recipe object, factory function(data, outcome, predictors)->recipe","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/resolve_recipe_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve a recipe input into a factory function — resolve_recipe_factory","text":"function(data, outcome, predictors) -> recipe","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/resolve_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Accept a parsnip spec OR a short string and return a finalized spec — resolve_spec","title":"Accept a parsnip spec OR a short string and return a finalized spec — resolve_spec","text":"Accept parsnip spec short string return finalized spec","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/resolve_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accept a parsnip spec OR a short string and return a finalized spec — resolve_spec","text":"","code":"resolve_spec(model_in, mode = \"regression\")"},{"path":"https://jberesford-fe.github.io/tiDML/reference/resolve_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accept a parsnip spec OR a short string and return a finalized spec — resolve_spec","text":"model_in parsnip model spec one \"rf\",\"xgb\",\"glmnet\",\"linear\" mode \"regression\" \"classification\"","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/tune_any.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune any parsnip spec on given resamples with a recipe — tune_any","title":"Tune any parsnip spec on given resamples with a recipe — tune_any","text":"Tune parsnip spec given resamples recipe","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/tune_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune any parsnip spec on given resamples with a recipe — tune_any","text":"","code":"tune_any(spec, rec, resamples, data_x, metrics = NULL, grid_size = 15)"}]
