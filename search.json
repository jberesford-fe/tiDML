[{"path":"https://jberesford-fe.github.io/tiDML/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Justin Beresford Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://jberesford-fe.github.io/tiDML/articles/package-replication.html","id":"replication-of-doubleml-results-with-tidml","dir":"Articles","previous_headings":"","what":"Replication of DoubleML results with tiDML","title":"DoubleML Package","text":"use 401k data Chernozhukov et al. (2018) replicate results package different specifications. goal show tiDML::dml_plr() can produce comparable results much less code.","code":""},{"path":"https://jberesford-fe.github.io/tiDML/articles/package-replication.html","id":"get-data-and-import-packages","dir":"Articles","previous_headings":"","what":"Get data and import packages","title":"DoubleML Package","text":"Note use data (401k) variables across specifications.","code":"library(tiDML) library(dplyr) library(purrr) library(tibble) library(ggplot2) library(DoubleML) library(mlr3) library(mlr3learners)  df401k <- DoubleML::fetch_401k(return_type = \"data.frame\", instrument = FALSE)  y_col  <- \"net_tfa\"   # or \"tw\" depending on the example d_col  <- \"e401\" x_cols <- c(\"age\",\"inc\",\"educ\",\"fsize\",\"marr\",\"twoearn\",\"db\",\"pira\",\"hown\")"},{"path":"https://jberesford-fe.github.io/tiDML/articles/package-replication.html","id":"tidml-approach-as-a-function","dir":"Articles","previous_headings":"","what":"tiDML approach as a function","title":"DoubleML Package","text":"Following Chernozhukov, use random forest stages first classification second regression.","code":"run_tidml <- function(seed, df, y, d, x, trees_grid = 1200L, n_folds = 5L) {   set.seed(seed)       df <- df |> mutate(!!d := as.factor(!!rlang::sym(d)))    fit_tidml <- dml_rf(     data = df,     y = !!rlang::sym(y),     d = !!rlang::sym(d),     x = x,   )    return(tibble(     method = \"tiDML\",     seed = seed,     theta = unname(fit_tidml$estimate),     se    = unname(fit_tidml$se)   ) |>     mutate(       lwr = theta - stats::qnorm(0.975) * se,       upr = theta + stats::qnorm(0.975) * se     )) }"},{"path":"https://jberesford-fe.github.io/tiDML/articles/package-replication.html","id":"doubleml-approach-as-a-function","dir":"Articles","previous_headings":"","what":"DoubleML approach as a function","title":"DoubleML Package","text":"Next use DoubleML package run model.","code":"run_dml <- function(seed, df, y, d, x, trees_grid = 1200L, n_folds = 5L) {   ## DoubleML :: PLR with ranger   ml_l <- lrn(\"regr.ranger\",               num.trees = trees_grid,                num.threads = 1,               respect.unordered.factors = \"order\")      ml_m <- lrn(     \"classif.ranger\",     num.trees = trees_grid,     num.threads = 1,     predict_type=\"prob\"   )    dml_data <- DoubleMLData$new(     data = df,      y_col = y,      d_cols = d,      x_cols = x   )    dml <- DoubleMLPLR$new(     dml_data,      ml_l = ml_l,      ml_m = ml_m,     n_folds = n_folds,     score = \"partialling out\"   )    dml$fit()    ci <- dml$confint(level = 0.95)   return(tibble(     method = \"DoubleML\",     seed = seed,     theta = as.numeric(dml$coef),     se    = as.numeric(dml$se),     lwr   = as.numeric(ci[1]),     upr   = as.numeric(ci[2])   )   ) }"},{"path":"https://jberesford-fe.github.io/tiDML/articles/package-replication.html","id":"run-both-methods-across-many-replications","dir":"Articles","previous_headings":"","what":"Run both methods across many replications","title":"DoubleML Package","text":"wrapper function runs methods returns combined data frame.","code":"replications <- 2L  run_both <- function(seed, df, y, d, x, trees_grid = 1200L, n_folds = 5L) {   tidml_row <- run_tidml(seed, df, y, d, x, trees_grid, n_folds)   dml_row   <- run_dml(seed, df, y, d, x, trees_grid, n_folds)   bind_rows(tidml_row, dml_row) }  seeds <- 401 + 0:replications-1   res <- map_dfr(   seeds,   ~ run_both(.x, df = df401k, y = y_col, d = d_col, x = x_cols) )"},{"path":"https://jberesford-fe.github.io/tiDML/articles/package-replication.html","id":"method-by-method-densities","dir":"Articles","previous_headings":"","what":"Method-by-method densities","title":"DoubleML Package","text":"randomness methods estimates vary across seeds. plot densities estimates across replications show overlap similar means.","code":"ggplot(res, aes(theta, fill = method)) +   geom_density(alpha = 0.35) +   geom_vline(     data = res %>% group_by(method) %>% summarize(mean_theta = mean(theta)),     aes(xintercept = mean_theta, color = method),     linetype = \"dashed\", size = 1   ) +   labs(     title = \"DML-PLR estimates across seeds\",     x = expression(hat(theta)), y = \"Density\", fill = \"Method\"   ) +   theme_minimal(base_size = 12)"},{"path":"https://jberesford-fe.github.io/tiDML/articles/tiDML.html","id":"first-pass-with-tidml","dir":"Articles","previous_headings":"","what":"First pass with tiDML","title":"Introduction to tiDML","text":"simplest case, can use default settings dml_plr() function estimate DML model, specifycing dataset, outcome metric (Y), treatment variable (D), control variables (X). print average treatment effect (ATE) mpg mtcars dataset, controlling variables covariates. use random forests (rf) nuisance models. string rf shortcut using ranger package fit random forest models. options include lasso, ridge, enet, xgboost, nnet. See ’ LINK MAN enging/model types available default. Printing recipe steps DML estimate shows preprocessing steps automatically applied data fitting nuisance models. case, + zero variance filtering, + Median imputation missing values, + Dummy encoding categorical variables, + Centering scaling numeric variables.","code":"library(tiDML)  random_forest_fitted <- dml_rf(   mtcars,   y = \"mpg\",   d = \"am\",   x = c(\"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"gear\", \"carb\"), )  #> Warning in make_folds_stratified(data, d = d_name, v = v): `d` is not #> binary-like; returning unstratified folds.  print(random_forest_fitted) #> $estimate #> [1] 2.007066 #>  #> $se #> [1] 1.030725 #>  #> $ci_95 #> [1] -0.01311834  4.02725116 #>  #> $y_res #>  [1]  1.0852933  1.0944433 -1.8354000  1.6322824  2.3378175 -0.7387300 #>  [7] -0.6508224  1.0624433  0.1387500 -1.0480433 -2.4790267 -0.7385210 #> [13]  1.4395842 -1.8410476 -3.4361490 -2.4165457  1.8151545  4.1730867 #> [19]  2.4523314  5.6358681 -2.5268062 -0.3520847 -2.5583274 -2.4065800 #> [25]  2.4943806 -3.2517800  0.8593267  6.4415367 -1.6208857 -0.0445400 #> [31] -0.1139940 -1.9803533 #>  #> $d_res #>  [1]  0.459666667  0.476666667  0.195166667 -0.148166667 -0.024133333 #>  [6] -0.071833333 -0.059033333 -0.461066667 -0.536500000 -0.559333333 #> [11] -0.559333333 -0.009566667 -0.001300000 -0.007566667 -0.003066667 #> [16] -0.006100000 -0.003400000  0.125666667  0.127100000  0.196566667 #> [21] -0.703666667 -0.024400000 -0.001000000 -0.180433333 -0.006400000 #> [26]  0.020433333  0.057866667  0.211966667  0.521433333  0.232366667 #> [31]  0.525433333  0.275900000 #>  #> $g_hat #>  [1] 19.91471 19.90556 24.63540 19.76772 16.36218 18.83873 14.95082 23.33756 #>  [9] 22.66125 20.24804 20.27903 17.13852 15.86042 17.04105 13.83615 12.81655 #> [17] 12.88485 28.22691 27.94767 28.26413 24.02681 15.85208 17.75833 15.70658 #> [25] 16.70562 30.55178 25.14067 23.95846 17.42089 19.74454 15.11399 23.38035 #>  #> $m_hat #>  [1] 0.540333333 0.523333333 0.804833333 0.148166667 0.024133333 0.071833333 #>  [7] 0.059033333 0.461066667 0.536500000 0.559333333 0.559333333 0.009566667 #> [13] 0.001300000 0.007566667 0.003066667 0.006100000 0.003400000 0.874333333 #> [19] 0.872900000 0.803433333 0.703666667 0.024400000 0.001000000 0.180433333 #> [25] 0.006400000 0.979566667 0.942133333 0.788033333 0.478566667 0.767633333 #> [31] 0.474566667 0.724100000 #>  #> $folds #> #  5-fold cross-validation  #> # A tibble: 5 × 2 #>   splits         id    #>   <list>         <chr> #> 1 <split [25/7]> Fold1 #> 2 <split [25/7]> Fold2 #> 3 <split [26/6]> Fold3 #> 4 <split [26/6]> Fold4 #> 5 <split [26/6]> Fold5 #>  #> $lm_fit #>  #> Call: #> stats::lm(formula = y_res ~ 0 + d_res, data = dat) #>  #> Coefficients: #> d_res   #> 2.007   #>  #>  #> $vcov #>          d_res #> d_res 1.062395 #>  #> $vcov_type #> [1] \"HC2\" #>  #> $.y_orig #>  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 #> [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 #> [31] 15.0 21.4 #>  #> $.d_orig #>  [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 #>  #> attr(,\"class\") #> [1] \"dml_plr\" #> attr(,\"y_name\") #> [1] \"mpg\" #> attr(,\"d_name\") #> [1] \"am\" random_forest_fitted$tuned_m$final_wf$pre$actions$recipe$recipe #> NULL"},{"path":"https://jberesford-fe.github.io/tiDML/articles/tiDML.html","id":"defining-your-own-model","dir":"Articles","previous_headings":"","what":"Defining your own model","title":"Introduction to tiDML","text":"explicit versin dml_plr() allows define model specifications using parsnip package. define random forest regression model outcome variable random forest classification model treatment variable, pass dml_plr().","code":"# Define the model for outcome   # Call dml_plr() with the explicit specs fit <- dml_rf(   data = mtcars |> dplyr::mutate(am = as.factor(am)),   y = \"mpg\",   d = \"am\",   x = c(\"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"gear\", \"carb\"), ) #> Warning in make_folds_stratified(data, d = d_name, v = v): `d` is not #> binary-like; returning unstratified folds.  print(fit) #> $estimate #> [1] 0.3480843 #>  #> $se #> [1] 0.9003277 #>  #> $ci_95 #> [1] -1.416526  2.112694 #>  #> $y_res #>  [1]  0.29041000  0.49630667 -3.04957000  2.81701571  2.97552667 -2.16001333 #>  [7] -0.37586429  0.58694333  0.15173000  0.35722000 -1.74625333  0.01984111 #> [13]  1.54633333 -1.04980182 -2.89449619 -2.63220810  2.27291000  4.63455333 #> [19]  1.92433667  5.31060667 -1.89149000 -0.09348286 -2.62061333 -2.36013056 #> [25]  3.79912524 -1.21207000  1.05402667  5.85988000 -2.18004889 -0.27596167 #> [31]  0.01971524 -2.38605667 #>  #> $d_res #>  [1]  0.339492063  0.321254762  0.193244444 -0.149723810 -0.070766667 #>  [6] -0.033438095 -0.111090476 -0.600507143 -0.669859524 -0.434112698 #> [11] -0.348113492 -0.003578571 -0.007181746 -0.004807143 -0.016788095 #> [16] -0.006215079 -0.012072222  0.114620635  0.175522222  0.228236508 #> [21] -0.683265079 -0.081366667 -0.002207937 -0.141382540 -0.063528571 #> [26]  0.189911111  0.098248413  0.081796825  0.535222222  0.340670635 #> [31]  0.704846032  0.295142063 #>  #> $g_hat #>  [1] 20.70959 20.50369 25.84957 18.58298 15.72447 20.26001 14.67586 23.81306 #>  [9] 22.64827 18.84278 19.54625 16.38016 15.75367 16.24980 13.29450 13.03221 #> [17] 12.42709 27.76545 28.47566 28.58939 23.39149 15.59348 17.82061 15.66013 #> [25] 15.40087 28.51207 24.94597 24.54012 17.98005 19.97596 14.98028 23.78606 #>  #> $m_hat #>  [1] 0.660507937 0.678745238 0.806755556 0.149723810 0.070766667 0.033438095 #>  [7] 0.111090476 0.600507143 0.669859524 0.434112698 0.348113492 0.003578571 #> [13] 0.007181746 0.004807143 0.016788095 0.006215079 0.012072222 0.885379365 #> [19] 0.824477778 0.771763492 0.683265079 0.081366667 0.002207937 0.141382540 #> [25] 0.063528571 0.810088889 0.901751587 0.918203175 0.464777778 0.659329365 #> [31] 0.295153968 0.704857937 #>  #> $folds #> #  5-fold cross-validation  #> # A tibble: 5 × 2 #>   splits         id    #>   <list>         <chr> #> 1 <split [25/7]> Fold1 #> 2 <split [25/7]> Fold2 #> 3 <split [26/6]> Fold3 #> 4 <split [26/6]> Fold4 #> 5 <split [26/6]> Fold5 #>  #> $lm_fit #>  #> Call: #> stats::lm(formula = y_res ~ 0 + d_res, data = dat) #>  #> Coefficients: #>  d_res   #> 0.3481   #>  #>  #> $vcov #>         d_res #> d_res 0.81059 #>  #> $vcov_type #> [1] \"HC2\" #>  #> $.y_orig #>  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 #> [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 #> [31] 15.0 21.4 #>  #> $.d_orig #>  [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 #> Levels: 0 1 #>  #> attr(,\"class\") #> [1] \"dml_plr\" #> attr(,\"y_name\") #> [1] \"mpg\" #> attr(,\"d_name\") #> [1] \"am\""},{"path":"https://jberesford-fe.github.io/tiDML/articles/user-defined-recipies.html","id":"tidml-with-user-defined-recipies","dir":"Articles","previous_headings":"","what":"TiDML with User-defined Recipies","title":"Set your own model","text":"","code":"library(tiDML)  fit <- dml_rf(   mtcars,   y = \"mpg\",   d = \"am\",   x = c(\"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"gear\", \"carb\"), )  #> Warning in make_folds_stratified(data, d = d_name, v = v): `d` is not #> binary-like; returning unstratified folds.  print(fit) #> $estimate #> [1] 2.007066 #>  #> $se #> [1] 1.030725 #>  #> $ci_95 #> [1] -0.01311834  4.02725116 #>  #> $y_res #>  [1]  1.0852933  1.0944433 -1.8354000  1.6322824  2.3378175 -0.7387300 #>  [7] -0.6508224  1.0624433  0.1387500 -1.0480433 -2.4790267 -0.7385210 #> [13]  1.4395842 -1.8410476 -3.4361490 -2.4165457  1.8151545  4.1730867 #> [19]  2.4523314  5.6358681 -2.5268062 -0.3520847 -2.5583274 -2.4065800 #> [25]  2.4943806 -3.2517800  0.8593267  6.4415367 -1.6208857 -0.0445400 #> [31] -0.1139940 -1.9803533 #>  #> $d_res #>  [1]  0.459666667  0.476666667  0.195166667 -0.148166667 -0.024133333 #>  [6] -0.071833333 -0.059033333 -0.461066667 -0.536500000 -0.559333333 #> [11] -0.559333333 -0.009566667 -0.001300000 -0.007566667 -0.003066667 #> [16] -0.006100000 -0.003400000  0.125666667  0.127100000  0.196566667 #> [21] -0.703666667 -0.024400000 -0.001000000 -0.180433333 -0.006400000 #> [26]  0.020433333  0.057866667  0.211966667  0.521433333  0.232366667 #> [31]  0.525433333  0.275900000 #>  #> $g_hat #>  [1] 19.91471 19.90556 24.63540 19.76772 16.36218 18.83873 14.95082 23.33756 #>  [9] 22.66125 20.24804 20.27903 17.13852 15.86042 17.04105 13.83615 12.81655 #> [17] 12.88485 28.22691 27.94767 28.26413 24.02681 15.85208 17.75833 15.70658 #> [25] 16.70562 30.55178 25.14067 23.95846 17.42089 19.74454 15.11399 23.38035 #>  #> $m_hat #>  [1] 0.540333333 0.523333333 0.804833333 0.148166667 0.024133333 0.071833333 #>  [7] 0.059033333 0.461066667 0.536500000 0.559333333 0.559333333 0.009566667 #> [13] 0.001300000 0.007566667 0.003066667 0.006100000 0.003400000 0.874333333 #> [19] 0.872900000 0.803433333 0.703666667 0.024400000 0.001000000 0.180433333 #> [25] 0.006400000 0.979566667 0.942133333 0.788033333 0.478566667 0.767633333 #> [31] 0.474566667 0.724100000 #>  #> $folds #> #  5-fold cross-validation  #> # A tibble: 5 × 2 #>   splits         id    #>   <list>         <chr> #> 1 <split [25/7]> Fold1 #> 2 <split [25/7]> Fold2 #> 3 <split [26/6]> Fold3 #> 4 <split [26/6]> Fold4 #> 5 <split [26/6]> Fold5 #>  #> $lm_fit #>  #> Call: #> stats::lm(formula = y_res ~ 0 + d_res, data = dat) #>  #> Coefficients: #> d_res   #> 2.007   #>  #>  #> $vcov #>          d_res #> d_res 1.062395 #>  #> $vcov_type #> [1] \"HC2\" #>  #> $.y_orig #>  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 #> [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 #> [31] 15.0 21.4 #>  #> $.d_orig #>  [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 #>  #> attr(,\"class\") #> [1] \"dml_plr\" #> attr(,\"y_name\") #> [1] \"mpg\" #> attr(,\"d_name\") #> [1] \"am\""},{"path":"https://jberesford-fe.github.io/tiDML/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Justin Beresford. Author, maintainer.","code":""},{"path":"https://jberesford-fe.github.io/tiDML/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beresford J (2025). tiDML: Double Machine Learning Tidymodels. R package version 0.0.0.9000.","code":"@Manual{,   title = {tiDML: Double Machine Learning with Tidymodels},   author = {Justin Beresford},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"https://jberesford-fe.github.io/tiDML/index.html","id":"tidml","dir":"","previous_headings":"","what":"Double Machine Learning with Tidymodels","title":"Double Machine Learning with Tidymodels","text":"goal tiDML twofold: Simple first pass: provide straightforward way run Double Machine Learning (DML) R. Users need specify data, formula, model type string (e.g. “random forest”, “xgboost” etc). Defaults set sensible values, ’s quick first pass ask: “OLS results change materially DML?” Run DML tidymodels way: flexible framework lets define inspect stages DML process explicitly. Specify first- second-stage models, chosing thousands parsnip models. backend, preprocessing handled recipes, combined workflows. models easy examine individually, fit seamlessly tiDML pipeline. short, tiDML can simplify things, ’s main contribution letting define examine stages DML process explicitly, way tidymodels user know love.","code":""},{"path":"https://jberesford-fe.github.io/tiDML/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Double Machine Learning with Tidymodels","text":"can install development version tiDML GitHub via pak, pacman remotes:","code":"# Using pak pak::pak(\"jberesford-fe/tiDML\")  # using pacman pacman::p_load_gh(\"jberesford-fe/tiDML\")  # using remotes remotes::install_github(\"jberesford-fe/tiDML\")"},{"path":"https://jberesford-fe.github.io/tiDML/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Double Machine Learning with Tidymodels","text":"basic example shows run DML PLR model random forests nuisance models, taking parameters default. See vignette detailed examples.","code":"library(tiDML)  fit <- dml_plr(   data = mtcars,   y = \"mpg\",   d = \"am\",   x = c(\"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"gear\", \"carb\"),   m_model = \"rf\",   g_model = \"rf\" )   print(fit)"},{"path":"https://jberesford-fe.github.io/tiDML/reference/dml_core_wf.html","id":null,"dir":"Reference","previous_headings":"","what":"Core DML-PLR using workflows — dml_core_wf","title":"Core DML-PLR using workflows — dml_core_wf","text":"Core DML-PLR using workflows","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/dml_core_wf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Core DML-PLR using workflows — dml_core_wf","text":"","code":"dml_core_wf(data, m_wf, g_wf, folds_outer = NULL, v = 5, vcov_type = \"HC2\")"},{"path":"https://jberesford-fe.github.io/tiDML/reference/dml_nnet.html","id":null,"dir":"Reference","previous_headings":"","what":"DML-PLR with single-hidden-layer MLP (nnet engine) — dml_nnet","title":"DML-PLR with single-hidden-layer MLP (nnet engine) — dml_nnet","text":"Uses small MLP nuisances. Adds dummy encoding nominal X normalizes numeric predictors (recommended NNs).","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/dml_nnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DML-PLR with single-hidden-layer MLP (nnet engine) — dml_nnet","text":"","code":"dml_nnet(   data,   y,   d,   x,   folds_outer = NULL,   v = 5,   vcov_type = \"HC2\",   hidden_units_m = NULL,   hidden_units_g = NULL,   penalty = 0.001,   epochs = 200,   max_weights = 5000,   trace = FALSE )"},{"path":"https://jberesford-fe.github.io/tiDML/reference/dml_nnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DML-PLR with single-hidden-layer MLP (nnet engine) — dml_nnet","text":"data, y, d, x dml_rf() folds_outer Optional rsample rset. NULL, folds made internally (stratified D). v Number outer folds folds_outer NULL. vcov_type Sandwich variance type (e.g., \"HC2\" \"HC3\"). hidden_units_m, hidden_units_g Hidden units m- g-models (NULL = heuristic). penalty L2 penalty (.k.. weight decay). epochs Max iterations (passed nnet::nnet() via parsnip). max_weights Max allowable weights nnet engine (MaxNWts) avoid overflow. trace Logical; print nnet training trace.","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/dml_rf.html","id":null,"dir":"Reference","previous_headings":"","what":"DML-PLR with Random Forest — dml_rf","title":"DML-PLR with Random Forest — dml_rf","text":"DML-PLR Random Forest","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/dml_rf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DML-PLR with Random Forest — dml_rf","text":"","code":"dml_rf(   data,   y,   d,   x,   folds_outer = NULL,   v = 5,   vcov_type = \"HC2\",   trees_grid = NULL )"},{"path":"https://jberesford-fe.github.io/tiDML/reference/make_folds.html","id":null,"dir":"Reference","previous_headings":"","what":"Make v-fold outer folds — make_folds","title":"Make v-fold outer folds — make_folds","text":"Make v-fold outer folds","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/make_folds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make v-fold outer folds — make_folds","text":"","code":"make_folds(data, v = 5)"},{"path":"https://jberesford-fe.github.io/tiDML/reference/make_folds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make v-fold outer folds — make_folds","text":"data Data frame v Number folds","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/make_folds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make v-fold outer folds — make_folds","text":"rsample rset","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/make_folds_stratified.html","id":null,"dir":"Reference","previous_headings":"","what":"Make stratified v-fold outer folds (recommended for binary D) — make_folds_stratified","title":"Make stratified v-fold outer folds (recommended for binary D) — make_folds_stratified","text":"Make stratified v-fold outer folds (recommended binary D)","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/make_folds_stratified.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make stratified v-fold outer folds (recommended for binary D) — make_folds_stratified","text":"","code":"make_folds_stratified(data, d, v = 5)"},{"path":"https://jberesford-fe.github.io/tiDML/reference/make_folds_stratified.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make stratified v-fold outer folds (recommended for binary D) — make_folds_stratified","text":"data Data frame d Treatment column name (string) v Number folds","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/make_folds_stratified.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make stratified v-fold outer folds (recommended for binary D) — make_folds_stratified","text":"rsample rset","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/oof_crossfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Out-of-fold cross-fitting for DML — oof_crossfit","title":"Out-of-fold cross-fitting for DML — oof_crossfit","text":"--fold cross-fitting DML","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/oof_crossfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Out-of-fold cross-fitting for DML — oof_crossfit","text":"","code":"oof_crossfit(data, folds, m_fit_fun, g_fit_fun, y_name, d_name)"},{"path":"https://jberesford-fe.github.io/tiDML/reference/run_dml.html","id":null,"dir":"Reference","previous_headings":"","what":"Run DML-PLR with user-supplied recipes and parsnip models — run_dml","title":"Run DML-PLR with user-supplied recipes and parsnip models — run_dml","text":"Run DML-PLR user-supplied recipes parsnip models","code":""},{"path":"https://jberesford-fe.github.io/tiDML/reference/run_dml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run DML-PLR with user-supplied recipes and parsnip models — run_dml","text":"","code":"run_dml(   data,   output_recipe,   treatment_recipe,   output_model,   treatment_model,   folds_outer = NULL,   v = 5,   vcov_type = \"HC2\" )"}]
